"use client";

import { useMemo } from "react";
import { ScanForm } from "@/components/ScanForm";
import { useSafeQuery } from "@/hooks/useSafeConvex";
import { api } from "../../convex/_generated/api";
import { Doc } from "../../convex/_generated/dataModel";
import { useUser } from "@clerk/nextjs";

// This type is defined in the backend, but we can use it here for type safety
type ReportItem = {
  vulnerability: string;
  severity: "low" | "medium" | "high" | "critical";
  description: string;
  poc: string;
  fix: string;
  educationalNotes: string;
};

function getStatusPill(status: string) {
  switch (status) {
    case "cloning":
      return <span className="px-2 py-1 text-xs font-medium text-blue-800 bg-blue-100 rounded-full">Cloning...</span>;
    case "scanning":
      return <span className="px-2 py-1 text-xs font-medium text-yellow-800 bg-yellow-100 rounded-full">Scanning...</span>;
    case "completed":
      return <span className="px-2 py-1 text-xs font-medium text-green-800 bg-green-100 rounded-full">Completed</span>;
    case "failed":
      return <span className="px-2 py-1 text-xs font-medium text-red-800 bg-red-100 rounded-full">Failed</span>;
    default:
      return <span className="px-2 py-1 text-xs font-medium text-gray-800 bg-gray-100 rounded-full">{status}</span>;
  }
}

function FindingCard({ finding }: { finding: ReportItem }) {
  return (
    <div className="p-4 mb-4 border border-gray-200 rounded-lg">
      <h4 className="font-bold text-md">{finding.vulnerability}</h4>
      <p className="text-sm text-gray-600 mb-2">Severity: <span className="font-medium">{finding.severity.charAt(0).toUpperCase() + finding.severity.slice(1)}</span></p>
      <p className="text-sm"><span className="font-semibold">Description:</span> {finding.description}</p>
      <p className="text-sm mt-2 font-mono bg-gray-50 p-2 rounded"><span className="font-semibold">Proof of Concept:</span> {finding.poc}</p>
      <p className="text-sm mt-2"><span className="font-semibold">Suggested Fix:</span> {finding.fix}</p>
    </div>
  );
}

function ScanResultCard({ scan }: { scan: Doc<"scans"> }) {
  return (
    <div key={scan._id} className="border p-4 rounded-lg mb-4 shadow-sm">
      <div className="flex justify-between items-center mb-4">
        <p className="font-bold text-lg break-all">{scan.url}</p>
        {getStatusPill(scan.status)}
      </div>
      {scan.status === "completed" && (
        <div>
          <h3 className="text-lg font-semibold mb-2">Scan Report</h3>
          {scan.report && scan.report.length > 0 ? (
            scan.report.map((finding, index) => (
              <FindingCard key={index} finding={finding} />
            ))
          ) : (
            <p className="text-gray-500">No vulnerabilities found.</p>
          )}
        </div>
      )}
    </div>
  );
}

export default function VulnerabilityScanner() {
  const { user } = useUser();
  const args = useMemo(() => (!user ? "skip" : {}), [user]);
  const { data: scans, isLoading, error } = useSafeQuery(
    api.scans.getScansForUser,
    args
  );

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Vulnerability Scanner</h1>
      <ScanForm />
      <div className="mt-8">
        <h2 className="text-xl font-bold mb-4">Your Scans</h2>
        {isLoading && <div>Loading scans...</div>}
        {error && (
          <div className="text-red-500">
            Error loading scans: {error.message}
          </div>
        )}
        {scans && scans.length === 0 && <div>No scans found. Run one above to get started.</div>}
        {scans &&
          scans.map((scan: Doc<"scans">) => (
            <ScanResultCard key={scan._id} scan={scan} />
          ))}
      </div>
    </div>
  );
}