
import { useState } from 'react';

export default function VulnerabilityScanner() {
  const [url, setUrl] = useState('');
  const [results, setResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    // Mock scanning process
    await new Promise((resolve) => setTimeout(resolve, 2000));
    setResults({
      url,
      vulnerabilities: [
        { id: 1, type: 'Cross-Site Scripting (XSS)', severity: 'High' },
        { id: 2, type: 'SQL Injection', severity: 'High' },
        { id: 3, type: 'Insecure Direct Object References', severity: 'Medium' },
      ],
    });
    setIsLoading(false);
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-2xl font-bold mb-4">Vulnerability Scanner</h1>
      <form onSubmit={handleSubmit} className="mb-4">
        <input
          type="text"
          value={url}
          onChange={(e) => setUrl(e.target.value)}
          placeholder="Enter URL to scan"
          className="border p-2 mr-2 w-full md:w-1/2"
          required
        />
        <button type="submit" className="bg-blue-500 text-white p-2 rounded" disabled={isLoading}>
          {isLoading ? 'Scanning...' : 'Scan'}
        </button>
      </form>
      {results && (
        <div>
          <h2 className="text-xl font-bold mb-2">Scan Results for {results.url}</h2>
          <ul>
            {results.vulnerabilities.map((vuln) => (
              <li key={vuln.id} className="border-b p-2">
                <p className="font-bold">{vuln.type}</p>
                <p>Severity: {vuln.severity}</p>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}
